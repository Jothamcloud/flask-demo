pipeline {
    agent any

    environment {
        ARTIFACTORY_URL = 'http://174.129.103.108:8082/artifactory' 
        ARTIFACTORY_REPO = 'flask'
        DOCKER_REGISTRY = "174.129.103.108:8082"
        IMAGE_NAME = "${DOCKER_REGISTRY}/${ARTIFACTORY_REPO}/flask-app"
        ARTIFACTORY_CREDS = credentials('artifactory-credentials')
        PYTHON_VERSION = '3.9'
        PATH = "${WORKSPACE}:${env.PATH}"
        JFROG_CLI_VERSION = "2.70.0"
        JFROG_CLI_PATH = "${WORKSPACE}/jfrog"
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t flask-app:${BUILD_NUMBER} -f src/Dockerfile ."
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                sh """
                curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
                export PATH=\$PATH:\$(pwd)/bin
                trivy image --exit-code 1 --severity HIGH,CRITICAL flask-app:${BUILD_NUMBER}
                """
            }
            post {
                success {
                    echo 'Trivy scan passed - no HIGH or CRITICAL vulnerabilities found'
                }
                failure {
                    echo 'Security vulnerabilities found!'
                }
            }
        }

        stage('JFrog CLI Setup and Config') {
            steps {
                sh """
                    curl -fL "https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/\${JFROG_CLI_VERSION}/jfrog-cli-linux-amd64/jf" -o ${JFROG_CLI_PATH}
                    chmod +x ${JFROG_CLI_PATH}
                    ${JFROG_CLI_PATH} --version
                """
                withCredentials([usernamePassword(credentialsId: 'artifactory-credentials', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASS')]) {
                    sh """
                        ${JFROG_CLI_PATH} config remove artifactory-server || true
                        ${JFROG_CLI_PATH} config add artifactory-server --artifactory-url=${ARTIFACTORY_URL} --user=${ARTIFACTORY_USER} --password=${ARTIFACTORY_PASS} --interactive=false
                    """
                }
            }
        }

        stage('Push to Artifactory') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'artifactory-credentials', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASS')]) {
                    script {
                        // Tag the image with the Artifactory repository
                        sh "docker tag flask-app:${BUILD_NUMBER} ${IMAGE_NAME}:${BUILD_NUMBER}"

                        // Push the Docker image to Artifactory
                        sh """
                            ${JFROG_CLI_PATH} rt docker-push ${IMAGE_NAME}:${BUILD_NUMBER} ${ARTIFACTORY_REPO} \
                            --url=${ARTIFACTORY_URL} \
                            --user=${ARTIFACTORY_USER} \
                            --password=${ARTIFACTORY_PASS} \
                            --build-name=my-build \
                            --build-number=${BUILD_NUMBER}
                        """

                        // Collect and publish build info
                        sh """
                            ${JFROG_CLI_PATH} rt build-add-git my-build ${BUILD_NUMBER}
                            ${JFROG_CLI_PATH} rt build-publish my-build ${BUILD_NUMBER}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            // Trigger the deployment pipeline
            build job: 'flask-deploy', // Replace with your deployment job name
                  parameters: [
                      string(name: 'BUILD_NUMBER', value: "${BUILD_NUMBER}")
                  ]
        }
        always {
            echo 'Cleaning up...'
            sh "docker rmi ${IMAGE_NAME}:${BUILD_NUMBER} || true"
            sh "docker rmi flask-app:${BUILD_NUMBER} || true"
            cleanWs()
        }
    }
}
