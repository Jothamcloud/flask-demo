pipeline {
    agent any

    environment {
        // JFrog Artifactory details
        ARTIFACTORY_URL = 'http://174.129.103.108:8082/'
        ARTIFACTORY_REPO = 'flask'
        DOCKER_REGISTRY = 'http://174.129.103.108:8082/artifactory/flask'

        // Docker Hub credentials
        ARTIFACTORY_USER = credentials('artifactory-username')
        ARTIFACTORY_PASSWORD = credentials('artifactory-password')

      
        PYTHON_VERSION = '3.9'
    }

    stages {
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t flask-app -f src/Dockerfile .'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                      // List contents of the container
                    sh 'echo "Contents of /app directory:"'
                    sh 'docker run --rm flask-app ls -la /app'
            
                         // List installed Python packages
                    sh 'echo "Installed Python packages:"'
                    sh 'docker run --rm flask-app pip list'
            
                        // Try to locate test files
                    sh 'echo "Searching for test files:"'
                    sh 'docker run --rm flask-app find /app -name "test_*.py"'
            
                        // Run pytest with verbose output
                    sh 'echo "Running pytest:"'
                    sh 'docker run --rm flask-app pytest -v /app'
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                sh '''
                curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
                export PATH=$PATH:$(pwd)/bin
                trivy image --exit-code 1 --severity HIGH,CRITICAL flask-app
                '''
            }
            post {
                failure {
                    echo 'Security vulnerabilities found!'
                }
            }
        }

        stage('JFrog CLI Setup') {
            steps {
                sh '''
                curl -fL https://getcli.jfrog.io | sh
                chmod +x jfrog
                '''
            }
        }

        stage('Push to Artifactory') {
            steps {
                script {
                    sh '''
                    ./jfrog rt docker-push flask-app $DOCKER_REGISTRY --build-name=my-build --build-number=$BUILD_NUMBER
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            cleanWs()
        }
    }
}
