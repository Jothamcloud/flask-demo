pipeline {
    agent any

    environment {
        // JFrog Artifactory details
        ARTIFACTORY_URL = 'http://174.129.103.108:8082/artifactory'
        ARTIFACTORY_REPO = 'flask'
        DOCKER_REGISTRY = "${ARTIFACTORY_URL}/${ARTIFACTORY_REPO}"
        
        // Credentials
        ARTIFACTORY_CREDS = credentials('artifactory-credentials')

        PYTHON_VERSION = '3.9'
        
        // Set PATH to include the current directory
        PATH = "${WORKSPACE}:${env.PATH}"

        // JFrog CLI version
        JFROG_CLI_VERSION = "2.70.0"

        // Docker image name and tag
        DOCKER_IMAGE_NAME = "flask-app"
        DOCKER_IMAGE_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} -f src/Dockerfile ."
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                sh '''
                curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
                export PATH=$PATH:$(pwd)/bin
                trivy image --exit-code 1 --severity HIGH,CRITICAL ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
                '''
            }
            post {
                success {
                    echo 'Trivy scan passed - no HIGH or CRITICAL vulnerabilities found'
                }
                failure {
                    echo 'Security vulnerabilities found!'
                }
            }
        }

        stage('JFrog CLI Setup and Config') {
            steps {
                sh """
                    curl -fL "https://releases.jfrog.io/artifactory/jfrog-cli/v2-jf/\${JFROG_CLI_VERSION}/jfrog-cli-linux-amd64/jf" -o jfrog
                    chmod +x jfrog
                    ./jfrog --version
                """
                withCredentials([usernamePassword(credentialsId: 'artifactory-credentials', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASS')]) {
                    sh '''
                        ./jfrog config add artifactory-server --artifactory-url=${ARTIFACTORY_URL} --user=${ARTIFACTORY_USER} --password=${ARTIFACTORY_PASS} --interactive=false
                    '''
                }
            }
        }

        stage('Push to Artifactory') {
            steps {
                script {
                    sh """
                    ./jfrog docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
                    --build-name=my-build \
                    --build-number=${BUILD_NUMBER} \
                    --server-id=artifactory-server
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh "docker rmi ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} || true"
            cleanWs()
        }
    }
}