pipeline {
    agent any

    environment {
        // JFrog Artifactory details
        ARTIFACTORY_URL = 'http://174.129.103.108:8082/artifactory'
        ARTIFACTORY_REPO = 'flask'
        DOCKER_REGISTRY = "${ARTIFACTORY_URL}/${ARTIFACTORY_REPO}"
        
        // Credentials
        ARTIFACTORY_CREDS = credentials('artifactory-credentials')

        PYTHON_VERSION = '3.9'
        
        // Set PATH to include the current directory
        PATH = "${WORKSPACE}:${env.PATH}"
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t flask-app -f src/Dockerfile .'
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                sh '''
                curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
                export PATH=$PATH:$(pwd)/bin
                trivy image --exit-code 1 --severity HIGH,CRITICAL flask-app
                '''
            }
            post {
                success {
                    echo 'Trivy scan passed - no HIGH or CRITICAL vulnerabilities found'
                }
                failure {
                    echo 'Security vulnerabilities found!'
                }
            }
        }

        stage('JFrog CLI Setup and Config') {
            steps {
                sh '''
                curl -fL https://install-cli.jfrog.io | sh
                mv jf jfrog
                chmod +x jfrog
                ./jfrog --version
                '''
                script {
                    // Configure JFrog CLI
                    sh """
                    ./jfrog config add artifactory-server --artifactory-url=${ARTIFACTORY_URL} --user=${ARTIFACTORY_CREDS_USR} --password=${ARTIFACTORY_CREDS_PSW} --interactive=false
                    """
                }
            }
        }

        stage('Push to Artifactory') {
            steps {
                script {
                    sh """
                    ./jfrog rt docker-push flask-app ${DOCKER_REGISTRY} --build-name=my-build --build-number=${BUILD_NUMBER} --server-id=artifactory-server
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            cleanWs()
        }
    }
}